"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[8808],{4614:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var s=t(42),r=t(4848),i=t(8453);const l={slug:"le-plus-petit-segfault",title:"Le plus petit segfault",description:"Coder le plus petit segfault du monde ! Et creusez dans le fonctionnement du 'main'.",tags:["C","segv"],hide_title:!1,authors:["mrvym"]},a=void 0,c={authorsImageUrls:[void 0]},o=[{value:"Un segfault",id:"un-segfault",level:3},{value:"On dump des obj",id:"on-dump-des-obj",level:2},{value:"Pour les quebecois",id:"pour-les-quebecois",level:2},{value:"Lancement du programme",id:"lancement-du-programme",level:2},{value:"Envp ??",id:"envp-",level:3},{value:"Encore plus petit",id:"encore-plus-petit",level:2},{value:"Scrt1.o ca sort d&#39;ou ?",id:"scrt1o-ca-sort-dou-",level:2},{value:"Bonus",id:"bonus",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Dans cette article, on va voir comment faire un code qui crash le plus efficacement possible.\nCela veut dire comprendre ce qu'est un segfault, marche la fonction main ainsi que le code avant."}),"\n",(0,r.jsx)(n.p,{children:"Une magnifique occasion de faire de l'assembleur !"}),"\n",(0,r.jsx)(n.p,{children:"Sans plus attendre, voici notre premier exemple :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"main;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Il compile tr\xe9s bien."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"gcc main.c -o main"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"et produit cet output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ ./main\n[1]    20677 segmentation fault (core dumped)  ./main\n"})}),"\n",(0,r.jsx)(n.h3,{id:"un-segfault",children:"Un segfault"}),"\n",(0,r.jsx)(n.p,{children:"Je pense que c'est le bon moment, c'est quoi un segfault ?"}),"\n",(0,r.jsx)(n.p,{children:"Un segfault ou segmentation fault est une erreur de segmentation. Nous l'avons lorsque que notre programme essaye de lire un pointeur qui ne nous appartient pas.\nAu lancement du programme, l'OS lui attribue une certaine quantit\xe9 de m\xe9moire et il n'a pas le droit d'en sortir."}),"\n",(0,r.jsx)(n.p,{children:"C'est une s\xe9curit\xe9 pour que des programmes ne puissent pas aller voir ailleurs."}),"\n",(0,r.jsx)(n.p,{children:"Lorsque l'OS (pour \xeatre pr\xe9cis, le MMU) voit que le programme essaye d'acc\xe9der a la m\xe9moire, il g\xe9n\xe8re cette fault."}),"\n",(0,r.jsx)(n.h2,{id:"on-dump-des-obj",children:"On dump des obj"}),"\n",(0,r.jsxs)(n.p,{children:["Pour mieux comprendre le fonctionnement du programme, on va allez voir le code machine.\nLe ",(0,r.jsx)(n.code,{children:"-t"})," nous permet de juste recuperer la liste des symboles."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ objdump -t ./main\n# <-- truncate --\x3e \n0000000000004000  w      .data\t0000000000000000              data_start\n0000000000004000 g       .data\t0000000000000000              __data_start\n0000000000001020 g     F .text\t0000000000000026              _start\n0000000000004010 g       .bss\t0000000000000000              __bss_start\n0000000000004014 g     O .bss\t0000000000000004              main\n# <-- truncate --\x3e \n0000000000001000 g     F .init\t0000000000000000              .hidden _init\n"})}),"\n",(0,r.jsxs)(n.p,{children:["On remarque le symbol ",(0,r.jsx)(n.code,{children:"main"})," est dans le segment ",(0,r.jsx)(n.code,{children:".bss"})," et pas dans ",(0,r.jsx)(n.code,{children:".text"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Segments in ELF file",src:t(1576).A+"",width:"1770",height:"972"})}),"\n",(0,r.jsxs)(n.p,{children:["Segment *",(0,r.jsx)(n.em,{children:"bss"})," :"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Block starting symbol (abbreviated to .bss or bss) is the portion of an object file, executable, or assembly language code that contains statically allocated variables"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Segment ",(0,r.jsx)(n.strong,{children:"text"})," :"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Text segment or simply as text, is a portion of an object file or the corresponding section of the program's virtual address space that contains executable instructions"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["On rend compte que notre code ne d\xe9clare pas une fonction mais bien une variable. La variable \xe9tant global le compilateur cr\xe9e un symbole pour elle.\nCela se v\xe9rifie tr\xe8s simplement en rajoutant une variable ",(0,r.jsx)(n.code,{children:"test"})," dans notre code."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"0000000000004018 g     O .bss\t0000000000000004              test\n"})}),"\n",(0,r.jsxs)(n.p,{children:["En effet, le nom ",(0,r.jsx)(n.code,{children:"main"})," n'est pas un keyword sp\xe9cifique en C. C'est juste un nom de fonction arbitraire qui est appel\xe9 au lancement du programme."]}),"\n",(0,r.jsx)(n.h2,{id:"pour-les-quebecois",children:"Pour les quebecois"}),"\n",(0,r.jsxs)(n.p,{children:["Pour les puristes d'entre vous, il est tout a fait possible de ne pas mettre de fonction ",(0,r.jsx)(n.code,{children:"main"})," dans votre code.\nIl vous suffit d'\xe9crire votre propre fonction ",(0,r.jsx)(n.code,{children:"_start"})," et de demander \xe0 GCC de ne pas link la sienne."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'\n#include <stdio.h>\n#include <stdlib.h>\n\nint principale() {\n  puts("Hey l\xe0, \xe7a marche-tu?");\n  return 0;\n}\n\nvoid _start() {\n  int ret = principale();\n  exit(ret);\n}\n\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"$ gcc principale.c -o principale -nostartfiles"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"lancement-du-programme",children:"Lancement du programme"}),"\n",(0,r.jsxs)(n.p,{children:["Mais d'ailleurs, qui call le ",(0,r.jsx)(n.code,{children:"main"})," ?"]}),"\n",(0,r.jsxs)(n.p,{children:["Cette fois ci, nous allons devoir regarder le code assembleur de notre code et plus sp\xe9cifiquement la fonction ",(0,r.jsx)(n.code,{children:"_start"}),".\nAu passage, on remarque que son symbole est bien dans le segment ",(0,r.jsx)(n.code,{children:".text"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Le code a \xe9t\xe9 simplifi\xe9, car la fonction compl\xe8te est assez complexe et longue"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-asm",children:"_start: \n    xor %ebp, %ebp            \n    mov (%rsp), %edi          \n    lea 8(%rsp), %rsi         \n    lea 16(%rsp,%rdi,8), %rdx \n    xor %eax, %eax            \n    call main                 \n\n    mov %eax, %edi    \n    xor %eax, %eax   \n    call _exit      \n"})}),"\n",(0,r.jsxs)(n.p,{children:["Le symbol ",(0,r.jsx)(n.code,{children:"_start"})," est le point d'entr\xe9e du programme, il n'est pas toujours a la m\xeame adresse. Son adresse est d\xe9finie ",(0,r.jsx)(n.code,{children:"ld"})," et on peut trouver la fonction dans le fichier ",(0,r.jsx)(n.code,{children:"Scrt1.o"}),".\nPour r\xe9sumer, on :"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["marque la fin de la stack frame","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"xor %ebp, %ebp"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["set argc","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"mov (%rsp), %edi"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["set argv","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"lea 8(%rsp), %rsi"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["set envp","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"lea 16(%rsp,%rdi,8), %rdx"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["set a 0, le return code (pour de la compatibilit\xe9)","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"xor %eax, %eax"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["call la fonction main avec main(argc, argv, envp)","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"call main"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["call la fonction _exit avec le return code","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["mov %eax, %edi",(0,r.jsx)(n.br,{}),"\n","xor %eax, %eax",(0,r.jsx)(n.br,{}),"\n","call _exit"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"envp-",children:"Envp ??"}),"\n",(0,r.jsx)(n.p,{children:"Le vrai prototype de la fonction main a 3 arguments."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int main(int argc, char* argv[], char* envp[]);\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Oui, j'ai vraiment d\xe9couvert le vrai prototype de la fonction main en faisant le reverse de la '_start'."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez vous en doutez avec le nom, ce sont les variables d'environnement du shell.\nSi on ne vous a jamais montr\xe9 cela, c'est parce que ce n'est pas portable (m\xeame si toute les machines actuels le supportent)."}),"\n",(0,r.jsx)(n.h2,{id:"encore-plus-petit",children:"Encore plus petit"}),"\n",(0,r.jsxs)(n.p,{children:["Et oui, si vous avez bien suivi, il est maintenant possible de segfault encore plus vite le programme. Il suffit que le segfault ne soit pas dans la fonction ",(0,r.jsx)(n.code,{children:"main"})," mais dans la fonction ",(0,r.jsx)(n.code,{children:"_start"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["On a vu comment faire pour coder notre propre fonction ",(0,r.jsx)(n.code,{children:"_start"}),". Vous vous dites surement que cela va \xeatre compliqu\xe9 de coder une fonction ",(0,r.jsx)(n.code,{children:"_start"})," en moins de 5 caract\xe8res.\nMais comme dit si bien Mr.Ping dans Kung Fu Panda."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Le secret du bonheur, c\u2019est qu'il n\u2019y a pas d\u2019ingr\xe9dient secret."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Et oui, il suffit de ne rien mettre dans le fichier source."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ touch main.c\n/usr/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000001000\n$ gcc -o main main.c -nostartfiles\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Nous avons certes un warning mais \xe7a compile.\nUn ",(0,r.jsx)(n.code,{children:"objdump"})," nous permet de voir qu'il n'y a globalement rien dans ce fichier et que le symbole ",(0,r.jsx)(n.code,{children:"_start"})," n'est pas d\xe9fini."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ objdump -t ./main\n<-- truncate --\x3e \n0000000000000000         *UND*\t0000000000000000 _start\n"})}),"\n",(0,r.jsx)(n.h2,{id:"scrt1o-ca-sort-dou-",children:"Scrt1.o ca sort d'ou ?"}),"\n",(0,r.jsxs)(n.p,{children:["Alors hormis le fait que j'ai lu la doc de GCC, comment est-ce que je sais que Scrt1.o existe ?\nVous connaissez le ",(0,r.jsx)(n.code,{children:"-v"})," ? Et oui, on peut tr\xe8s bien activ\xe9 le debug / verbose sur GCC."]}),"\n",(0,r.jsx)(n.p,{children:"Personne le fait parce qu'il faut avoir un sacr\xe9 melon pour consid\xe9rer que GCC fait mal son travail (sauf moi)."}),"\n",(0,r.jsxs)(n.p,{children:["En activant ce flag, on se retrouve avec pas mal de variable d'env qui sont print mais pas que. On trouve notamment cette ligne dans laquelle on voit l'include des fichiers ",(0,r.jsx)(n.code,{children:".o"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/collect2 \n    -plugin /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/liblto_plugin.so \n    -plugin-opt=/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/lto-wrapper \n    -plugin-opt=-fresolution=/tmp/ccEcycpv.res \n    -plugin-opt=-pass-through=-lgcc \n    -plugin-opt=-pass-through=-lgcc_s \n    -plugin-opt=-pass-through=-lc \n    -plugin-opt=-pass-through=-lgcc \n    -plugin-opt=-pass-through=-lgcc_s \n    --build-id --eh-frame-hdr --hash-style=gnu \n    -m elf_x86_64 \n    -dynamic-linker /lib64/ld-linux-x86-64.so.2 \n    -pie -o main \n    /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../lib/Scrt1.o \n    /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../lib/crti.o \n    /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/crtbeginS.o \n    -L/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1 \n    -L/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../lib -L/lib/../lib -L/usr/lib/../lib \n    -L/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../.. /tmp/cciOyF1Z.o \n    -lgcc \n    --push-state \n    --as-needed \n    -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s \n    --pop-state /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/crtendS.o \n    /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../lib/crtn.o\n"})}),"\n",(0,r.jsx)(n.p,{children:"On remarque beaucoup de flags, on peut essayer d'analyser rapidement leur effet."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Les amateurs de CTF, vous aurez remarquer le flag ",(0,r.jsx)(n.code,{children:"-pie"})," qui permet d'activer l'address space layout randomization (ASLR)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-lgcc"})," est oui, votre programme C compile a la librairie dynamique GCC.\nVous pouvez le fait de compiler avec en faisant un ",(0,r.jsx)(n.code,{children:"-nostdlib"}),". Je ne vois pas bien l'int\xe9r\xeat mais c'est un choix."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-m elf_x86_64"}),", c'est ici que GCC sp\xe9cifie l'architecture de la machine cible\nC'est possible de modifier cette machine cible, cela s'appelle la cross compilation (mais j'en ferai un article sp\xe9cifique)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["On trouve aussi le fichier ",(0,r.jsx)(n.code,{children:"Scrt1.o"})," qui contient le point d'entr\xe9e (_start) de l'ex\xe9cutable. Les fichiers ",(0,r.jsx)(n.code,{children:"crti.o"})," et ",(0,r.jsx)(n.code,{children:"crtbeginS.o"})," eux fournissent des routines n\xe9cessaires \xe0 l\u2019initialisation des fonctions globales et statiques.\nOn pourra citer la fonction ",(0,r.jsx)(n.code,{children:"_init"})," et ",(0,r.jsx)(n.code,{children:"_fini"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Source :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.embecosm.com/appnotes/ean9/html/ch05s02.html",children:"The C Runtime Initialization, crt0.o"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.linuxquestions.org/questions/programming-9/_start-_init-and-frame_dummy-functions-810257/",children:"Linux Questions - Forums"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://stackoverflow.com/questions/29694564/what-is-the-use-of-start-in-c",children:"Stackoverflow - _start in C"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"bonus",children:"Bonus"}),"\n",(0,r.jsxs)(n.p,{children:["Pour les ",(0,r.jsx)(n.strong,{children:"chads"})," ! Voici le code complet de la fonction ",(0,r.jsx)(n.code,{children:"_start"}),"."]}),"\n",(0,r.jsx)(s,{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-asm",children:"0000000000001020 <_start>:\n    1020:\tf3 0f 1e fa          \tendbr64\n    1024:\t31 ed                \txor    %ebp,%ebp\n    1026:\t49 89 d1             \tmov    %rdx,%r9\n    1029:\t5e                   \tpop    %rsi\n    102a:\t48 89 e2             \tmov    %rsp,%rdx\n    102d:\t48 83 e4 f0          \tand    $0xfffffffffffffff0,%rsp\n    1031:\t50                   \tpush   %rax\n    1032:\t54                   \tpush   %rsp\n    1033:\t45 31 c0             \txor    %r8d,%r8d\n    1036:\t31 c9                \txor    %ecx,%ecx\n    1038:\t48 8d 3d d5 2f 00 00 \tlea    0x2fd5(%rip),%rdi        # 4014 <main>\n    103f:\tff 15 7b 2f 00 00    \tcall   *0x2f7b(%rip)        # 3fc0 <__libc_start_main@GLIBC_2.34>\n    1045:\tf4                   \thlt\n    1046:\t66 2e 0f 1f 84 00 00 \tcs nopw 0x0(%rax,%rax,1)\n    104d:\t00 00 00\n    1050:\t48 8d 3d b9 2f 00 00 \tlea    0x2fb9(%rip),%rdi        # 4010 <__TMC_END__>\n    1057:\t48 8d 05 b2 2f 00 00 \tlea    0x2fb2(%rip),%rax        # 4010 <__TMC_END__>\n    105e:\t48 39 f8             \tcmp    %rdi,%rax\n    1061:\t74 15                \tje     1078 <_start+0x58>\n    1063:\t48 8b 05 5e 2f 00 00 \tmov    0x2f5e(%rip),%rax        # 3fc8 <_ITM_deregisterTMCloneTable@Base>\n    106a:\t48 85 c0             \ttest   %rax,%rax\n    106d:\t74 09                \tje     1078 <_start+0x58>\n    106f:\tff e0                \tjmp    *%rax\n    1071:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n    1078:\tc3                   \tret\n    1079:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n    1080:\t48 8d 3d 89 2f 00 00 \tlea    0x2f89(%rip),%rdi        # 4010 <__TMC_END__>\n    1087:\t48 8d 35 82 2f 00 00 \tlea    0x2f82(%rip),%rsi        # 4010 <__TMC_END__>\n    108e:\t48 29 fe             \tsub    %rdi,%rsi\n    1091:\t48 89 f0             \tmov    %rsi,%rax\n    1094:\t48 c1 ee 3f          \tshr    $0x3f,%rsi\n    1098:\t48 c1 f8 03          \tsar    $0x3,%rax\n    109c:\t48 01 c6             \tadd    %rax,%rsi\n    109f:\t48 d1 fe             \tsar    $1,%rsi\n    10a2:\t74 14                \tje     10b8 <_start+0x98>\n    10a4:\t48 8b 05 2d 2f 00 00 \tmov    0x2f2d(%rip),%rax        # 3fd8 <_ITM_registerTMCloneTable@Base>\n    10ab:\t48 85 c0             \ttest   %rax,%rax\n    10ae:\t74 08                \tje     10b8 <_start+0x98>\n    10b0:\tff e0                \tjmp    *%rax\n    10b2:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n    10b8:\tc3                   \tret\n    10b9:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n    10c0:\tf3 0f 1e fa          \tendbr64\n    10c4:\t80 3d 45 2f 00 00 00 \tcmpb   $0x0,0x2f45(%rip)        # 4010 <__TMC_END__>\n    10cb:\t75 33                \tjne    1100 <_start+0xe0>\n    10cd:\t55                   \tpush   %rbp\n    10ce:\t48 83 3d 0a 2f 00 00 \tcmpq   $0x0,0x2f0a(%rip)        # 3fe0 <__cxa_finalize@GLIBC_2.2.5>\n    10d5:\t00\n    10d6:\t48 89 e5             \tmov    %rsp,%rbp\n    10d9:\t74 0d                \tje     10e8 <_start+0xc8>\n    10db:\t48 8b 3d 26 2f 00 00 \tmov    0x2f26(%rip),%rdi        # 4008 <__dso_handle>\n    10e2:\tff 15 f8 2e 00 00    \tcall   *0x2ef8(%rip)        # 3fe0 <__cxa_finalize@GLIBC_2.2.5>\n    10e8:\te8 63 ff ff ff       \tcall   1050 <_start+0x30>\n    10ed:\tc6 05 1c 2f 00 00 01 \tmovb   $0x1,0x2f1c(%rip)        # 4010 <__TMC_END__>\n    10f4:\t5d                   \tpop    %rbp\n    10f5:\tc3                   \tret\n    10f6:\t66 2e 0f 1f 84 00 00 \tcs nopw 0x0(%rax,%rax,1)\n    10fd:\t00 00 00\n    1100:\tc3                   \tret\n    1101:\t66 66 2e 0f 1f 84 00 \tdata16 cs nopw 0x0(%rax,%rax,1)\n    1108:\t00 00 00 00\n    110c:\t0f 1f 40 00          \tnopl   0x0(%rax)\n    1110:\tf3 0f 1e fa          \tendbr64\n    1114:\te9 67 ff ff ff       \tjmp    1080 <_start+0x60>\n"})})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1576:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/segment-c-code-268215d718030f25a84a60138bb336b8.png"},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}},42:e=>{e.exports=JSON.parse('{"permalink":"/le-plus-petit-segfault","editUrl":"https://github.com/MrVyM/blog/2025-01-17-petit-segfault/index.md","source":"@site/blog/2025-01-17-petit-segfault/index.md","title":"Le plus petit segfault","description":"Coder le plus petit segfault du monde ! Et creusez dans le fonctionnement du \'main\'.","date":"2025-01-17T00:00:00.000Z","tags":[{"inline":false,"label":"C Language","permalink":"/tags/c","description":"The most wonderful language"},{"inline":true,"label":"segv","permalink":"/tags/segv"}],"hasTruncateMarker":true,"authors":[{"name":"Vianney Marticou","title":"Mr.VyM @ EPITA","url":"https://github.com/mrvym","page":{"permalink":"/authors/mrvym"},"socials":{"github":"https://github.com/mrvym"},"imageURL":"https://github.com/mrvym.png","key":"mrvym"}],"frontMatter":{"slug":"le-plus-petit-segfault","title":"Le plus petit segfault","description":"Coder le plus petit segfault du monde ! Et creusez dans le fonctionnement du \'main\'.","tags":["C","segv"],"hide_title":false,"authors":["mrvym"]},"unlisted":false,"nextItem":{"title":"Tester c\'est tricher, compiler c\'est douter","permalink":"/tester-cest-tricher-compiler-c-est-douter"}}')}}]);