"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[8808],{4614:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var s=t(42),r=t(4848),a=t(8453);const i={slug:"petit-segfault",title:"Le plus petit segfault",description:"Coucou",tags:["C","segv"],hide_title:!1,authors:["mrvym"]},l=void 0,c={authorsImageUrls:[void 0]},o=[{value:"Un segfault",id:"un-segfault",level:3},{value:"On dump des obj",id:"on-dump-des-obj",level:2},{value:"Pour les quebecois",id:"pour-les-quebecois",level:2},{value:"Lancement du programme",id:"lancement-du-programme",level:2},{value:"Envp ??",id:"envp-",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Dans cette article, on va voir comment faire un code qui crash le plus efficacement possible.\nCela veut dire comprendre ce qu'est un segfault, marche la fonction main ainsi que le code avant."}),"\n",(0,r.jsx)(n.p,{children:"Une magnifique occasion de faire de l'assembleur !"}),"\n",(0,r.jsx)(n.p,{children:"Sans plus attendre, voici notre premier exemple :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int main;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Il compile parfaitement et sans aucun warning."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"gcc main.c -o main"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"et produit cet output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ ./main\n[1]    20677 segmentation fault (core dumped)  ./main\n"})}),"\n",(0,r.jsx)(n.h3,{id:"un-segfault",children:"Un segfault"}),"\n",(0,r.jsx)(n.p,{children:"Je pense que c'est le bon moment, c'est quoi un segfault ?"}),"\n",(0,r.jsx)(n.h2,{id:"on-dump-des-obj",children:"On dump des obj"}),"\n",(0,r.jsxs)(n.p,{children:["Pour mieux comprendre le fonctionnement du programme, on va allez voir le code machine.\nLe ",(0,r.jsx)(n.code,{children:"-t"})," nous permet de juste recuperer la liste des symboles."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ objdump -t ./main\n# <-- truncate --\x3e \n0000000000004000  w      .data\t0000000000000000              data_start\n0000000000004000 g       .data\t0000000000000000              __data_start\n0000000000001020 g     F .text\t0000000000000026              _start\n0000000000004010 g       .bss\t0000000000000000              __bss_start\n0000000000004014 g     O .bss\t0000000000000004              main\n# <-- truncate --\x3e \n0000000000001000 g     F .init\t0000000000000000              .hidden _init\n"})}),"\n",(0,r.jsxs)(n.p,{children:["On remarque le symbol ",(0,r.jsx)(n.code,{children:"main"})," est dans le segment ",(0,r.jsx)(n.code,{children:".bss"})," et pas dans ",(0,r.jsx)(n.code,{children:".text"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Segment Bss :"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Block starting symbol (abbreviated to .bss or bss) is the portion of an object file, executable, or assembly language code that contains statically allocated variables\nSegment Text :\nText segment or simply as text, is a portion of an object file or the corresponding section of the program's virtual address space that contains executable instructions"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"TODO : Segment"}),"\n",(0,r.jsxs)(n.p,{children:["On rend compte que notre code ne declare pas une fonction mais bien une variable. La variable etant global le compilateur cree un symbole pour elle.\nCela se verifie tres simplement en rajoutant une variable ",(0,r.jsx)(n.code,{children:"test"})," dans notre code."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"0000000000004018 g     O .bss\t0000000000000004              test\n"})}),"\n",(0,r.jsxs)(n.p,{children:["En effet, le nom ",(0,r.jsx)(n.code,{children:"main"})," n'est pas un keyword specifique en C. C'est juste un nom de fonction arbitraire qui est appellee au lancement du programme."]}),"\n",(0,r.jsx)(n.h2,{id:"pour-les-quebecois",children:"Pour les quebecois"}),"\n",(0,r.jsxs)(n.p,{children:["Pour les puristes d'entre vous, il est tout a fait possible de ne pas mettre de fonction ",(0,r.jsx)(n.code,{children:"main"})," dans votre code.\nIl vous suffit d'ecrire votre propre fonction ",(0,r.jsx)(n.code,{children:"_start"})," et de demander a GCC de ne pas link la sienne."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'\n#include <stdio.h>\n#include <stdlib.h>\n\nint principale() {\n  puts("Hey l\xe0, \xe7a marche-tu?");\n  return 0;\n}\n\nvoid _start() {\n  int ret = principale();\n  exit(ret);\n}\n\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"$ gcc principale.c -o principale -nostartfiles"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"lancement-du-programme",children:"Lancement du programme"}),"\n",(0,r.jsxs)(n.p,{children:["Mais d'ailleurs, qui call le ",(0,r.jsx)(n.code,{children:"main"})," ?"]}),"\n",(0,r.jsxs)(n.p,{children:["Cette fois ci, nous allons devoir regarder le code assembleur de notre code et plus specifiquement la fonction ",(0,r.jsx)(n.code,{children:"_start"}),".\nAu passage, on remarque que son symbol est bien dans le segment ",(0,r.jsx)(n.code,{children:".text"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Ceci est un code simplifier parce que la fonction est assez complexe et longue."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-asm",children:"_start: \n    xor %ebp, %ebp            \n    mov (%rsp), %edi          \n    lea 8(%rsp), %rsi         \n    lea 16(%rsp,%rdi,8), %rdx \n    xor %eax, %eax            \n    call main                 \n\n    mov %eax, %edi    \n    xor %eax, %eax   \n    call _exit      \n"})}),"\n",(0,r.jsxs)(n.p,{children:["Le symbol ",(0,r.jsx)(n.code,{children:"_start"})," est le point d'entr\xe9e du programme, il n'est pas toujours a la meme addresse. Elle est definie par le programme ",(0,r.jsx)(n.code,{children:"ld"}),".\nPour resumer, on :"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["marque la fin de la stack frame","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"xor %ebp, %ebp"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["set argc","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"mov (%rsp), %edi"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["set argv","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"lea 8(%rsp), %rsi"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["set envp","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"lea 16(%rsp,%rdi,8), %rdx"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["set a 0, le return code (pour de la comptatibilit\xe9)","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"xor %eax, %eax"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["call la fonction main avec main(argc, argv, envp)","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"call main"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["call la fonction _exit avec le return code","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["mov %eax, %edi",(0,r.jsx)(n.br,{}),"\n","xor %eax, %eax",(0,r.jsx)(n.br,{}),"\n","call _exit"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)("summary",{children:"La vraie fonction _start"}),"\nAllez bonne chance"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-asm",children:"0000000000001020 <_start>:\n    1020:\tf3 0f 1e fa          \tendbr64\n    1024:\t31 ed                \txor    %ebp,%ebp\n    1026:\t49 89 d1             \tmov    %rdx,%r9\n    1029:\t5e                   \tpop    %rsi\n    102a:\t48 89 e2             \tmov    %rsp,%rdx\n    102d:\t48 83 e4 f0          \tand    $0xfffffffffffffff0,%rsp\n    1031:\t50                   \tpush   %rax\n    1032:\t54                   \tpush   %rsp\n    1033:\t45 31 c0             \txor    %r8d,%r8d\n    1036:\t31 c9                \txor    %ecx,%ecx\n    1038:\t48 8d 3d d5 2f 00 00 \tlea    0x2fd5(%rip),%rdi        # 4014 <main>\n    103f:\tff 15 7b 2f 00 00    \tcall   *0x2f7b(%rip)        # 3fc0 <__libc_start_main@GLIBC_2.34>\n    1045:\tf4                   \thlt\n    1046:\t66 2e 0f 1f 84 00 00 \tcs nopw 0x0(%rax,%rax,1)\n    104d:\t00 00 00\n    1050:\t48 8d 3d b9 2f 00 00 \tlea    0x2fb9(%rip),%rdi        # 4010 <__TMC_END__>\n    1057:\t48 8d 05 b2 2f 00 00 \tlea    0x2fb2(%rip),%rax        # 4010 <__TMC_END__>\n    105e:\t48 39 f8             \tcmp    %rdi,%rax\n    1061:\t74 15                \tje     1078 <_start+0x58>\n    1063:\t48 8b 05 5e 2f 00 00 \tmov    0x2f5e(%rip),%rax        # 3fc8 <_ITM_deregisterTMCloneTable@Base>\n    106a:\t48 85 c0             \ttest   %rax,%rax\n    106d:\t74 09                \tje     1078 <_start+0x58>\n    106f:\tff e0                \tjmp    *%rax\n    1071:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n    1078:\tc3                   \tret\n    1079:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n    1080:\t48 8d 3d 89 2f 00 00 \tlea    0x2f89(%rip),%rdi        # 4010 <__TMC_END__>\n    1087:\t48 8d 35 82 2f 00 00 \tlea    0x2f82(%rip),%rsi        # 4010 <__TMC_END__>\n    108e:\t48 29 fe             \tsub    %rdi,%rsi\n    1091:\t48 89 f0             \tmov    %rsi,%rax\n    1094:\t48 c1 ee 3f          \tshr    $0x3f,%rsi\n    1098:\t48 c1 f8 03          \tsar    $0x3,%rax\n    109c:\t48 01 c6             \tadd    %rax,%rsi\n    109f:\t48 d1 fe             \tsar    $1,%rsi\n    10a2:\t74 14                \tje     10b8 <_start+0x98>\n    10a4:\t48 8b 05 2d 2f 00 00 \tmov    0x2f2d(%rip),%rax        # 3fd8 <_ITM_registerTMCloneTable@Base>\n    10ab:\t48 85 c0             \ttest   %rax,%rax\n    10ae:\t74 08                \tje     10b8 <_start+0x98>\n    10b0:\tff e0                \tjmp    *%rax\n    10b2:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n    10b8:\tc3                   \tret\n    10b9:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n    10c0:\tf3 0f 1e fa          \tendbr64\n    10c4:\t80 3d 45 2f 00 00 00 \tcmpb   $0x0,0x2f45(%rip)        # 4010 <__TMC_END__>\n    10cb:\t75 33                \tjne    1100 <_start+0xe0>\n    10cd:\t55                   \tpush   %rbp\n    10ce:\t48 83 3d 0a 2f 00 00 \tcmpq   $0x0,0x2f0a(%rip)        # 3fe0 <__cxa_finalize@GLIBC_2.2.5>\n    10d5:\t00\n    10d6:\t48 89 e5             \tmov    %rsp,%rbp\n    10d9:\t74 0d                \tje     10e8 <_start+0xc8>\n    10db:\t48 8b 3d 26 2f 00 00 \tmov    0x2f26(%rip),%rdi        # 4008 <__dso_handle>\n    10e2:\tff 15 f8 2e 00 00    \tcall   *0x2ef8(%rip)        # 3fe0 <__cxa_finalize@GLIBC_2.2.5>\n    10e8:\te8 63 ff ff ff       \tcall   1050 <_start+0x30>\n    10ed:\tc6 05 1c 2f 00 00 01 \tmovb   $0x1,0x2f1c(%rip)        # 4010 <__TMC_END__>\n    10f4:\t5d                   \tpop    %rbp\n    10f5:\tc3                   \tret\n    10f6:\t66 2e 0f 1f 84 00 00 \tcs nopw 0x0(%rax,%rax,1)\n    10fd:\t00 00 00\n    1100:\tc3                   \tret\n    1101:\t66 66 2e 0f 1f 84 00 \tdata16 cs nopw 0x0(%rax,%rax,1)\n    1108:\t00 00 00 00\n    110c:\t0f 1f 40 00          \tnopl   0x0(%rax)\n    1110:\tf3 0f 1e fa          \tendbr64\n    1114:\te9 67 ff ff ff       \tjmp    1080 <_start+0x60>\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"envp-",children:"Envp ??"}),"\n",(0,r.jsx)(n.p,{children:"Et oui, le vrai prototype de la fonction main est"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int main(int argc, char* argv[], char* envp[]);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez vous en doutez avec le nom, ce sont les variables d'environment du shell.\nSi on ne vous a jamais montr\xe9 cela, c'est parce que ce n'est pas POSIX (meme si toute les machines actuels le supportent)."}),"\n",(0,r.jsx)(n.p,{children:"Source :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.embecosm.com/appnotes/ean9/html/ch05s02.html",children:"The C Runtime Initialization, crt0.o"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},42:e=>{e.exports=JSON.parse('{"permalink":"/blog/petit-segfault","editUrl":"https://blog.marticou.com/blog/blog/2025-01-17-petit-segfault/index.md","source":"@site/blog/2025-01-17-petit-segfault/index.md","title":"Le plus petit segfault","description":"Coucou","date":"2025-01-17T00:00:00.000Z","tags":[{"inline":false,"label":"C Language","permalink":"/blog/tags/c","description":"The most wonderful language"},{"inline":true,"label":"segv","permalink":"/blog/tags/segv"}],"readingTime":3.8333333333333335,"hasTruncateMarker":true,"authors":[{"name":"Vianney Marticou","title":"Mr.VyM @ EPITA","url":"https://github.com/mrvym","page":{"permalink":"/blog/authors/mrvym"},"socials":{"github":"https://github.com/mrvym"},"imageURL":"https://github.com/mrvym.png","key":"mrvym"}],"frontMatter":{"slug":"petit-segfault","title":"Le plus petit segfault","description":"Coucou","tags":["C","segv"],"hide_title":false,"authors":["mrvym"]},"unlisted":false,"nextItem":{"title":"Tester c\'est tricher, compiler c\'est douter","permalink":"/blog/tester-cest-tricher"}}')}}]);