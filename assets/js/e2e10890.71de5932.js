"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[9331],{1073:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>t});var i=s(8908),r=s(4848),l=s(8453);const a={slug:"merveilleux-monde-de-make",title:"Le Merveilleux Monde de Make",authors:["mrvym"],tags:["make","c","c++","criterion"]},o="Le merveilleux monde de Make",c={authorsImageUrls:[void 0]},t=[{value:"Make, ca sert a quoi ?",id:"make-ca-sert-a-quoi-",level:3},{value:"Hello World",id:"hello-world",level:3},{value:"Plus on est de fou, plus on rit",id:"plus-on-est-de-fou-plus-on-rit",level:3},{value:"Clean",id:"clean",level:3},{value:"Phony",id:"phony",level:4},{value:"On range le repo",id:"on-range-le-repo",level:3},{value:"Where GDB ?",id:"where-gdb-",level:3},{value:"Tester, c&#39;est tricher",id:"tester-cest-tricher",level:3},{value:"On teste les tests",id:"on-teste-les-tests",level:3},{value:"Like a pro",id:"like-a-pro",level:3},{value:"Bonus",id:"bonus",level:2},{value:"Biblioth\xe8que statique",id:"biblioth\xe8que-statique",level:3},{value:"Makefile r\xe9cursif",id:"makefile-r\xe9cursif",level:3},{value:"R\xe9pertoires infinis",id:"r\xe9pertoires-infinis",level:3},{value:"$ make conclusion",id:"-make-conclusion",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Les Makefiles constituent un outil essentiel dans le d\xe9veloppement de logiciels que ce soit en C/C++ ou autre. Ils permettent une gestion efficace des projets en automatisant le processus de compilation, de nettoyage et de tests."}),"\n",(0,r.jsx)(n.p,{children:"Dans cet article, nous explorerons les bonnes pratiques pour la cr\xe9ation et l'utilisation de Makefiles dans des projets C quelque soit leurs complexit\xe9s."}),"\n",(0,r.jsx)(n.h3,{id:"make-ca-sert-a-quoi-",children:"Make, ca sert a quoi ?"}),"\n",(0,r.jsx)(n.p,{children:"Make est un programme qui a pour but de g\xe9n\xe9rer des fichier. Il permet de g\xe9n\xe9rer des pdfs, des ex\xe9cutables et bien plus."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Dans les ann\xe9es 1970, la compilation des programmes devient de plus en plus longue et complexe, n\xe9cessitant de nombreuses \xe9tapes interd\xe9pendantes. La plupart des syst\xe8mes alors utilis\xe9s reposent sur des script shell, n\xe9cessitant de r\xe9p\xe9ter toutes les \xe9tapes lors de la moindre correction. C'est dans ce contexte que Make fut d\xe9velopp\xe9 par le docteur Stuart Feldman en 1977. En g\xe9rant les d\xe9pendances entre fichiers sources et fichiers compil\xe9s, Make permet de ne compiler que ce qui est n\xe9cessaire \xe0 la suite de la modification d'un fichier source."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Il existe un makefile par d\xe9faut, qui d\xe9finit un grand nombre de r\xe8gles afin de g\xe9n\xe9rer la plupart des fichiers avec lesquels, vous serez amen\xe9 a travailler."}),"\n",(0,r.jsxs)(n.p,{children:["Pour voir ce makefile, par d\xe9faut : ",(0,r.jsx)(n.code,{children:"make -p"})]}),"\n",(0,r.jsx)(n.h3,{id:"hello-world",children:"Hello World"}),"\n",(0,r.jsx)(n.p,{children:"Pour d\xe9buter, nous allons prendre un cas tr\xe8s simple celui d'un fichier source unique, dans le m\xeame dossier que notre makefile."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:".\n\u2514\u2500\u2500 main.c \n"})}),"\n",(0,r.jsx)(n.p,{children:"Dans ce cas, il existe 2 facons de faire."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ make main # Je souligne l'absence du .c\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Dans cette commande, nous demandons a make de cr\xe9er le fichier ",(0,r.jsx)(n.code,{children:"main"}),". Mais comment sait-il qu'il doit utiliser le fichier main.c pour faire notre binaire ? Cela est d\xe9fini dans les r\xe8gles par d\xe9faut."]}),"\n",(0,r.jsxs)(n.p,{children:["Nous pouvons aussi creer un fichier ",(0,r.jsx)(n.code,{children:"Makefile"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile=",children:"# Makefile\nmy_compilation_rule: \n    gcc main.c\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Une fois, le fichier cr\xe9e, il suffit d'ex\xe9cuter la commande ",(0,r.jsx)(n.code,{children:"make"})," (qui, par d\xe9faut, ex\xe9cute la premi\xe8re r\xe8gle du fichier).\nNous pouvons aussi mettre en argument le nom de la r\xe8gle que nous voulons ex\xe9cuter ",(0,r.jsx)(n.code,{children:"make my_compilation_rule"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"plus-on-est-de-fou-plus-on-rit",children:"Plus on est de fou, plus on rit"}),"\n",(0,r.jsx)(n.p,{children:"Notre projet grossit, nous avons maintenant un deuxi\xe8me fichier source."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:".\n\u251c\u2500\u2500 foo.c\n\u251c\u2500\u2500 foo.h\n\u2514\u2500\u2500 main.c \n"})}),"\n",(0,r.jsx)(n.p,{children:"Dans l'objectif de faire un makefile propre, nous allons d\xe9clarer une variable OBJ qui contiendra nos diff\xe9rents fichiers. On en profite pour d\xe9clarer un variable CC pour notre compilateur."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"# makefile\nCC = gcc\nOBJ = main.o foo.o\n\n\n# Cette variable sera utilis\xe9e dans la r\xe8gle implicite qui compile les .o  \nCFLAGS = # My C Flags for the compiler\nLDFLAGS = # My linker flags\nTARGET = a.out\n\nall: $(OBJ)\n\t$(CC) $(OBJ) -o $(TARGET) $(LDFLAGS)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Cette fois-ci, nous avons ajouter des d\xe9pendances \xe0 notre r\xe8gle ",(0,r.jsx)(n.code,{children:"all"}),". Maintenant, make sait qu'il faut d'abord faire les fichiers .o avant de pouvoir faire le linkage de tous les fichiers en un binaire."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"# makefile\nSRC = $(wildcard *.c) # main.c foo.c\nOBJ = $(SRC:.c=.o) # main.o foo.o\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Dans ce makefile, nous avons choisi de ne pas r\xe9cup\xe9rer, \xe0 la main, les diff\xe9rents fichiers source. Nous r\xe9cup\xe9rons automatiquement les fichiers source via la fonction ",(0,r.jsx)(n.code,{children:"wildcard"}),". Cette fonction agit comme le globbing d'un shell. Dans cette example, elle r\xe9cup\xe8re tous les fichiers terminant par ",(0,r.jsx)(n.code,{children:".c"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Nous les convertissons en ",(0,r.jsx)(n.code,{children:".o"})," via cette syntax ",(0,r.jsx)(n.code,{children:"$(NAME:old=new)"})," qui n'est rien de moins qu'un replace. La suite de notre makefile reste n\xe9anmoins la m\xeame chose."]}),"\n",(0,r.jsx)(n.h3,{id:"clean",children:"Clean"}),"\n",(0,r.jsx)(n.p,{children:"Comme vous avez pu le remarquer, un makefile peut facilement g\xe9n\xe9rer un grand nombre de fichiers. C'est pour cela que nous allons cr\xe9er une nouvelle r\xe8gle dans notre makefile qui a pour but de supprimer tous les fichiers issus de la compilation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"\n# ...\n\nclean: \n    $(RM) $(OBJ)\n    $(RM) $(TARGET)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Pour les petits curieux qui se demandent ce que signifie la variable RM. C'est un simple alias avec la commande ",(0,r.jsx)(n.code,{children:"rm -f"}),". Il faut savoir que cette variable peut tr\xe8s bien override. On peut tr\xe8s bien voir ",(0,r.jsx)(n.code,{children:"RM = echo"})," ou bien ",(0,r.jsx)(n.code,{children:"RM = mv to/path/"})," (\xe0 la place du remove), cela peut \xeatre tr\xe8s utile dans certains projets."]}),"\n",(0,r.jsx)(n.h4,{id:"phony",children:"Phony"}),"\n",(0,r.jsxs)(n.p,{children:["Nous l'avons dit au d\xe9but de cet article, mais make est un utilitaire qui permet de g\xe9n\xe9rer des fichiers. Mais que se passe-t-il, si l'on appelle la r\xe8gle clean et qui existe un fichier ",(0,r.jsx)(n.code,{children:"clean"})," dans notre dossier."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"make: 'clean' is up to date.\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Pour \xe9viter ce genre de probl\xe8me, il faut sp\xe9cifier dans notre makefile que notre r\xe8gle n'a pas pour but de g\xe9n\xe9rer un fichier. Pour cela, nous utilisons le mot cl\xe9 ",(0,r.jsx)(n.code,{children:"phony"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Il suffit d'\xe9crire."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:".PHONY: my_rule1 my_rule12 # ... \n"})}),"\n",(0,r.jsx)(n.h3,{id:"on-range-le-repo",children:"On range le repo"}),"\n",(0,r.jsxs)(n.p,{children:["Maintenant, que nous avons r\xe9ussi \xe0 faire un makefile propre, nous allons pouvoir faire \xe9voluer notre projet en mettant nos fichiers dans un dossier ",(0,r.jsx)(n.code,{children:"src"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:".\n\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 foo.c\n    \u251c\u2500\u2500 foo.h\n    \u2514\u2500\u2500 main.c\n"})}),"\n",(0,r.jsx)(n.p,{children:"Pour cela, il nous suffit de rechercher la liste de nos .c dans le dossier src/ puis de les transformer en .o. On peut modifier le code que nous avons fait ci-dessus."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile=",children:"SRCDIR = src\nSRC = $(wildcard $(SRCDIR)/*.c)\nOBJ = $(SRC:$(SRCDIR)/%.c=$(SRCDIR)/%.o)\n# qui est \xe9quivalent \xe0\n# OBJ = src/main.o \\\n#       src/main.o\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"where-gdb-",children:"Where GDB ?"}),"\n",(0,r.jsxs)(n.p,{children:["Il peut \xeatre utile d'avoir un r\xe8gle debug, afin de ne pas avoir \xe0 mettre un ",(0,r.jsx)(n.code,{children:"-g"})," dans nos CFLAGS par d\xe9faut."]}),"\n",(0,r.jsx)(n.p,{children:"Pour cela, il suffit de :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"debug: CFLAGS += -g\ndebug: all\n"})}),"\n",(0,r.jsxs)(n.p,{children:["On remarque que la r\xe8gle debug n'a pas de corps. Elle se contente d'ajouter un flag et d'appeler notre r\xe8gle ",(0,r.jsx)(n.code,{children:"all"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"tester-cest-tricher",children:"Tester, c'est tricher"}),"\n",(0,r.jsx)(n.p,{children:"Pour cet article, nous allons voir comment faire un Makefile pour une test suite criterion."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:".\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 src/\n...\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 foo_test.c\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Pour pouvoir lancer, nos tests, il va falloir que l'on trouve les fichiers source du dossier ",(0,r.jsx)(n.code,{children:"tests"}),", puis linker tous nos fichiers en excluant le fichier main.o."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"TEST_DIR = tests\nSRC_TEST = $(wildcard $(TEST_DIR)/*.c)\nOBJ_TEST = $(SRC:$(TEST_DIR)/%.c=$(TEST_DIR)/%.o)\n\n# ... \n\ncheck: $(filter-out $(SRC_DIR)/main.o, $(OBJ)) $(OBJ_TEST)\n$(CC) $^ -o $(TARGET) $(LDFLAGS)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["On remarque que le fichier main.o est exclus en utilisant la fonction ",(0,r.jsx)(n.code,{children:"filter-out"}),". On voit aussi l'appel d'une variable pour le moment inconnu. Il en existe un grand nombre."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$^"}),"  : La liste des d\xe9pendances de la r\xe8gle"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$<"})," : Le nom de la premi\xe8re d\xe9pendance"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"$@"})," : Le nom de la r\xe8gle"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"on-teste-les-tests",children:"On teste les tests"}),"\n",(0,r.jsxs)(n.p,{children:["Si l'on parle de test, nous devons forc\xe9ment parler de coverage. Pour cela rien de plus simple, nous ajoutons les flags a nos variables puis ex\xe9cutons ",(0,r.jsx)(n.code,{children:"GCOVR"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile=",children:"coverage: CFLAGS += -fPIC --coverage\ncoverage: LDFLAGS += -lgcov -lcriterion\ncoverage: check\ngcovr --print-summary\n"})}),"\n",(0,r.jsx)(n.h3,{id:"like-a-pro",children:"Like a pro"}),"\n",(0,r.jsxs)(n.p,{children:["La cr\xe9ation d'un dossier build est la cerise sur le g\xe2teau. Elle permet au d\xe9veloppeur de faire ",(0,r.jsx)(n.code,{children:"rm -rf build/"})," pour faire un clean."]}),"\n",(0,r.jsxs)(n.p,{children:["Pour cela, nous allons devoir modifier notre variable ",(0,r.jsx)(n.code,{children:"OBJ"})," et nous allons devoir cr\xe9er un r\xe8gle pour la compilation des .o. Nous ne pouvons plus utiliser les r\xe8gles implicite."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"BUILD_DIR = build\nOBJ = $(SRC:$(SRC_DIR)/%.c=$(BUILD_DIR)/%.o)\n\n# Compilation des fichiers source\n$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c | $(BUILD_DIR)\n$(CC) $(CFLAGS) -c $< -o $@\n    \n# Creer le repertoire de build\n$(BUILD_DIR):\nmkdir -p $(BUILD_DIR)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Alors on remarque que cette fois-ci, nous n'avons pas d\xe9fini une r\xe8gle, mais avec une variable. Nous avons m\xeame utilis\xe9 une sorte de regex pour la d\xe9finir."}),"\n",(0,r.jsxs)(n.p,{children:["Nous avons aussi d\xfb mettre un pr\xe9requis en plus, la r\xe8gle $(build_dir). Le fait de mettre un ",(0,r.jsx)(n.code,{children:"|"})," signifie qu'il doit d'abord v\xe9rifier qu'il est n\xe9cessaire de faire cette r\xe8gle."]}),"\n",(0,r.jsx)(n.h2,{id:"bonus",children:"Bonus"}),"\n",(0,r.jsx)(n.h3,{id:"biblioth\xe8que-statique",children:"Biblioth\xe8que statique"}),"\n",(0,r.jsx)(n.p,{children:"Pour cr\xe9er une biblioth\xe8que statique \xe0 partir des fichiers source, vous pouvez ajouter des r\xe8gles au Makefile :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"LIB_TARGET = libmylib.a\nLIB_OBJS = $(filter-out $(BUILD_DIR)/main.o, $(OBJS))\n\n$(LIB_TARGET): $(LIB_OBJS)\nar rcs $@ $^\n"})}),"\n",(0,r.jsx)(n.p,{children:"Une fois, la librairie cr\xe9e, vous pourrez simplement la link avec votre binaire."}),"\n",(0,r.jsx)(n.h3,{id:"makefile-r\xe9cursif",children:"Makefile r\xe9cursif"}),"\n",(0,r.jsx)(n.p,{children:"Si votre projet comporte des sous-modules, vous pouvez utiliser un Makefile r\xe9cursif. Imaginons un projet avec la structure suivante."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:".\n\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 features1/\n        ...\n        \u2514\u2500\u2500 Makefile\n    \u251c\u2500\u2500 features2/\n        ...\n        \u2514\u2500\u2500 Makefile\n    \u251c\u2500\u2500 features3/\n        ...\n        \u2514\u2500\u2500 Makefile\n    \u251c\u2500\u2500 features4/\n        ...\n        \u2514\u2500\u2500 Makefile\n    \u251c\u2500\u2500 main.c\n    \u2514\u2500\u2500 Makefile\n"})}),"\n",(0,r.jsx)(n.p,{children:"Pour cela, il y a deux approches possibles. La premi\xe8re serait de faire un seul makefile \xe0 la racine de notre projet et faire un find de nos fichiers .c. Nous verrons comment faire par la suite."}),"\n",(0,r.jsx)(n.p,{children:"La deuxi\xe8me, c'est de faire une structure r\xe9cursif via le Makefile suivant."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"# src/makefile \nSUBDIRS = $(wildcard */.)\n\n.PHONY: subdirs $(SUBDIRS)\n\nsubdirs: $(SUBDIRS)\n\n$(SUBDIRS):\n    $(MAKE) -C $@\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Avec ce fichier, nous allons pouvoir mettre un makefile dans chaque dossier features et lui et lui seul g\xe9rera la compilation de la features. Ils seront appel\xe9s par le ",(0,r.jsx)(n.code,{children:"src/Makefile"})," via la r\xe8gles subdirs."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"# Makefile\n\nexport CFLAGS = -Wall -Werror -pedantic\n\n# ...\n"})}),"\n",(0,r.jsx)(n.p,{children:"N'oubliez pas d'export vos variables dans votre Makefile afin qu\xb4elle s'applique sur les Makefiles suivants."}),"\n",(0,r.jsx)(n.p,{children:"Ce genre d'architecture n\xe9cessite, la plupart du temps, de la combiner avec la cr\xe9ation de librairie statique."}),"\n",(0,r.jsx)(n.h3,{id:"r\xe9pertoires-infinis",children:"R\xe9pertoires infinis"}),"\n",(0,r.jsxs)(n.p,{children:["Nous avons vu comment utiliser la fonction ",(0,r.jsx)(n.code,{children:"wildcard"})," mais comment faire pour recuperer l'int\xe9gralit\xe9 de nos fichiers sources ?"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 foo/\n        \u2514\u2500\u2500 bar/\n            ...\n                \u2514\u2500\u2500 foobar/\n                    \u2514\u2500\u2500 barfoo/\n                        \u2514\u2500\u2500 here.c\n"})}),"\n",(0,r.jsx)(n.p,{children:"La prise en charge des r\xe9pertoires \"infinis\" peut se faire via des r\xe8gles g\xe9n\xe9riques ou bien par l'interm\xe9diaire d'un sub-shell."}),"\n",(0,r.jsx)(n.p,{children:"Par exemple :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:'# Attention, il faut que votre systeme possede la command find\n\nSRC = $(shell find $(SRC_DIR) -name "*.c")\n'})}),"\n",(0,r.jsx)(n.p,{children:"ou bien"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"# Je laisse les plus aventureux d'entre vous dechiffrer ce code\n\nrwildcard = $(foreach d, $(wildcard $(1:=/*)), $(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))\nSRC = $(rwildcard src,*.c)\n"})}),"\n",(0,r.jsx)(n.p,{children:"ou encore"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"SRC = $(wildcard src/*.c) \\\n      $(wildcard src/*/*.c) \\\n      # ... # \n      $(wildcard src/*/*/*/*/*/*/*/*/*/*/.c)\n# S'il vous plait, ne faites pas ca \n"})}),"\n",(0,r.jsx)(n.h2,{id:"-make-conclusion",children:"$ make conclusion"}),"\n",(0,r.jsx)(n.p,{children:"En conclusion, l'utilisation judicieuse des Makefiles est cruciale pour la gestion efficace de projets. Il permet d'\xe9conomiser \xe9norm\xe9ment de temps lors du processus de d\xe9veloppement. Ce n'est pas pour rien que la quasi-int\xe9gralit\xe9 de l'industrie utilise cet outil."}),"\n",(0,r.jsx)(n.p,{children:"Cette article n'\xe9tant bien entendu, pas exhaustif, je vous invite \xe0 vous renseigner par vous meme afin de d\xe9couvrir les autres fonctionnalit\xe9s de cet outil."})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}},8908:e=>{e.exports=JSON.parse('{"permalink":"/blog/blog/merveilleux-monde-de-make","editUrl":"https://github.com/mrvym/blog/blog/2024-03-14-Merveilleux-Monde-de-Make/index.md","source":"@site/blog/2024-03-14-Merveilleux-Monde-de-Make/index.md","title":"Le Merveilleux Monde de Make","description":"Les Makefiles constituent un outil essentiel dans le d\xe9veloppement de logiciels que ce soit en C/C++ ou autre. Ils permettent une gestion efficace des projets en automatisant le processus de compilation, de nettoyage et de tests.","date":"2024-03-14T00:00:00.000Z","tags":[{"inline":true,"label":"make","permalink":"/blog/blog/tags/make"},{"inline":true,"label":"c","permalink":"/blog/blog/tags/c"},{"inline":true,"label":"c++","permalink":"/blog/blog/tags/c"},{"inline":true,"label":"criterion","permalink":"/blog/blog/tags/criterion"}],"readingTime":5.753333333333333,"hasTruncateMarker":true,"authors":[{"name":"Vianney Marticou","title":"Mr.VyM @ EPITA","url":"https://github.com/mrvym","page":{"permalink":"/blog/blog/authors/mrvym"},"socials":{"github":"https://github.com/mrvym"},"imageURL":"https://github.com/mrvym.png","key":"mrvym"}],"frontMatter":{"slug":"merveilleux-monde-de-make","title":"Le Merveilleux Monde de Make","authors":["mrvym"],"tags":["make","c","c++","criterion"]},"unlisted":false,"prevItem":{"title":"How to code plot and chart in Docusaurus with MDX","permalink":"/blog/blog/plot-chart-docusaurus-mdx"}}')}}]);