"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[8432],{62:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>c});var n=i(4654),r=i(4848),s=i(8453);const o={title:"Tester c'est tricher, compiler c'est douter",slug:"/tester-cest-tricher",tags:["git","CI","C"],hide_title:!1,date:new Date("2025-01-10T00:00:00.000Z"),authors:["mrvym"]},l="Tester c'est tricher, compiler c'est douter",a={authorsImageUrls:[void 0]},c=[{value:"Histoire",id:"histoire",level:2},{value:"Pourquoi",id:"pourquoi",level:2},{value:"Fonctionnement",id:"fonctionnement",level:3},{value:"D\xe9monstration",id:"d\xe9monstration",level:2},{value:"Simple Compile",id:"simple-compile",level:3},{value:"Compile with flags",id:"compile-with-flags",level:3},{value:"Criterion + flags",id:"criterion--flags",level:2},{value:"Before Scripts",id:"before-scripts",level:3},{value:"Multi stages",id:"multi-stages",level:3},{value:"Formatteur",id:"formatteur",level:2},{value:"Cache",id:"cache",level:2},{value:"Artefact ?",id:"artefact-",level:2},{value:"Coverage ?",id:"coverage-",level:2},{value:"Custom base",id:"custom-base",level:2}];function u(e){const t={blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Dans cet article, nous allons voir le concept de Continuous Integration (CI), son interet et ses inconevnients"}),"\n",(0,r.jsx)(t.h2,{id:"histoire",children:"Histoire"}),"\n",(0,r.jsx)(t.p,{children:"Mais d'abord, comme a mon habitude, un petit point histoire."}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"In 1999, Beck elaborated more in his first full book on Extreme Programming. CruiseControl, one of the first open-source CI tools, self-published source was released in 2001."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"pourquoi",children:"Pourquoi"}),"\n",(0,r.jsx)(t.p,{children:"Le but d'une CI est de pouvoir faire des tests automatises et cela a chaque commit. On appelle cela, une Continuous Integration car cela revient a verifier qu'a chaque commit qui est fait, le code est toujours fonctionel.\nElle est surtout utile lors des merges requests, elle permet de verifier qu'il n'y a pas de breaking change."}),"\n",(0,r.jsx)(t.h3,{id:"fonctionnement",children:"Fonctionnement"}),"\n",(0,r.jsx)(t.p,{children:"Je dois d'abord, vous expliquez quelque mots de vocabulaire avant de pouvoir expliquer le fonctionnement."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Jobs : C'est une instance d'un docker qui execute un script. Cela peut etre du code, des tests ou bien juste un ",(0,r.jsx)(t.code,{children:"echo"}),".\n// TODO : photo"]}),"\n",(0,r.jsxs)(t.li,{children:["Pipeline : C'est un ensemble de jobs qui sont execut\xe9s par Gitlab a chaque commit.",(0,r.jsx)(t.br,{}),"\n","// TODO : photo"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Je suppose que vous commencez a comprendre le fonctionnement d'une CI, le but est de lancer une instance pour chaque jobs et de verifier son return code. Si tout est bon, alors on lance le jobs suivant pour finir la pipeline."}),"\n",(0,r.jsx)(t.h2,{id:"d\xe9monstration",children:"D\xe9monstration"}),"\n",(0,r.jsxs)(t.p,{children:["Nous allons utiliser le format Gitlab, c'est un fichier ",(0,r.jsx)(t.code,{children:".yaml"})," que l'on nomme ",(0,r.jsx)(t.code,{children:".gitlab-ci.yml"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"simple-compile",children:"Simple Compile"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"image: alpine:latest\n\nmyjobname: \n  - script: \n    - make\n"})}),"\n",(0,r.jsx)(t.h3,{id:"compile-with-flags",children:"Compile with flags"}),"\n",(0,r.jsx)(t.p,{children:"Pour compiler avec des flags sp\xe9cifiques, soit vous avez un rule dans votre makefile qui le fait, soit vous pouvez le faire \xe0 la main."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'myjobname_hard: \n  - script:\n    - CFLAGS="-Wall -Werror" make\n    # or \n    - make compile_flags\n'})}),"\n",(0,r.jsx)(t.h2,{id:"criterion--flags",children:"Criterion + flags"}),"\n",(0,r.jsx)(t.h3,{id:"before-scripts",children:"Before Scripts"}),"\n",(0,r.jsx)(t.h3,{id:"multi-stages",children:"Multi stages"}),"\n",(0,r.jsx)(t.h2,{id:"formatteur",children:"Formatteur"}),"\n",(0,r.jsx)(t.h2,{id:"cache",children:"Cache"}),"\n",(0,r.jsxs)(t.p,{children:["Dans certains cas, cela peut etre utile de mettre un cache dans notre CI.\nLe cas typique est celui du JS. C'est inutile de re-telecharger le dossier ",(0,r.jsx)(t.code,{children:"node-modules/"})," \xe1 chaque pipeline.\nCe dossier ou bien fichier sera donc sauvegarder entre chaque pipeline / jobs."]}),"\n",(0,r.jsx)(t.p,{children:"Vous pouvez neamoins le clean quand vous le souhaitez."}),"\n",(0,r.jsx)(t.h2,{id:"artefact-",children:"Artefact ?"}),"\n",(0,r.jsx)(t.p,{children:"benchmarking in a ci"}),"\n",(0,r.jsx)(t.h2,{id:"coverage-",children:"Coverage ?"}),"\n",(0,r.jsx)(t.h2,{id:"custom-base",children:"Custom base"}),"\n",(0,r.jsx)(t.p,{children:"Vous avez pu voir que depuis le debut de cette article, nous ne precisons pas d'environment de CI. J'avais dit qu'une CI utilisait un docker mais lequel ?"}),"\n",(0,r.jsx)(t.p,{children:"Il suffit de preciser cela, au debut de notre fichier de configuration. Vous pouvez utiliser n'importe quelle image docker, quelle soit public ou priv\xe9e."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"image: alpine:latest\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>l});var n=i(6540);const r={},s=n.createContext(r);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:t},e.children)}},4654:e=>{e.exports=JSON.parse('{"permalink":"/tester-cest-tricher","editUrl":"https://blog.marticou.com/blog/2025-01-10-Tester-cest-tricher/index.md","source":"@site/blog/2025-01-10-Tester-cest-tricher/index.md","title":"Tester c\'est tricher, compiler c\'est douter","description":"Dans cet article, nous allons voir le concept de Continuous Integration (CI), son interet et ses inconevnients","date":"2025-01-10T00:00:00.000Z","tags":[{"inline":true,"label":"git","permalink":"/tags/git"},{"inline":true,"label":"CI","permalink":"/tags/ci"},{"inline":false,"label":"C Language","permalink":"/tags/c","description":"The most wonderful language"}],"readingTime":1.44,"hasTruncateMarker":true,"authors":[{"name":"Vianney Marticou","title":"Mr.VyM @ EPITA","url":"https://github.com/mrvym","page":{"permalink":"/authors/mrvym"},"socials":{"github":"https://github.com/mrvym"},"imageURL":"https://github.com/mrvym.png","key":"mrvym"}],"frontMatter":{"title":"Tester c\'est tricher, compiler c\'est douter","slug":"/tester-cest-tricher","tags":["git","CI","C"],"hide_title":false,"date":"2025-01-10T00:00:00.000Z","authors":["mrvym"]},"unlisted":false,"nextItem":{"title":"Introduction \xe0 Terraform avec Proxmox","permalink":"/intro-terraform-proxmox"}}')}}]);