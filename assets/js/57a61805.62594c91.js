"use strict";(self.webpackChunkmrvym_blog=self.webpackChunkmrvym_blog||[]).push([[9448],{3717:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var t=s(9715),i=s(4848),l=s(8453);const r={slug:"pinsyscall-on-openbsd",title:"D\xe9sactiver les pinsyscalls sur OpenBSD",tags:["openbsd","syscall","pinsyscall","kernel"],authors:"mrvym",hide_title:!1,date:"05/03/2025"},a="D\xe9sactiver les pinsyscalls sur OpenBSD",o={authorsImageUrls:[void 0]},c=[];function p(e){const n={code:"code",p:"p",...(0,l.R)(),...e.components};return(0,i.jsxs)(n.p,{children:["Les versions r\xe9centes d'OpenBSD emp\xeachent l'utilisation directe des syscalls depuis le code utilisateur, en imposant une v\xe9rification dans le linker (",(0,i.jsx)(n.code,{children:"ld.so"}),").\nCela renforce la s\xe9curit\xe9 en rendant les exploits plus difficiles. Cet article explore la mise en place de cette protection, son fonctionnement, et comment la d\xe9sactiver en modifiant le code source du kernel."]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}},9715:e=>{e.exports=JSON.parse('{"permalink":"/pinsyscall-on-openbsd","editUrl":"https://github.com/MrVyM/MrVyM.github.io/issues/blog/2025-05-03-Desactiver-pinsyscall-bsd.md","source":"@site/blog/2025-05-03-Desactiver-pinsyscall-bsd.md","title":"D\xe9sactiver les pinsyscalls sur OpenBSD","description":"Les versions r\xe9centes d\'OpenBSD emp\xeachent l\'utilisation directe des syscalls depuis le code utilisateur, en imposant une v\xe9rification dans le linker (ld.so).","date":"2025-05-03T00:00:00.000Z","tags":[{"inline":true,"label":"openbsd","permalink":"/tags/openbsd"},{"inline":true,"label":"syscall","permalink":"/tags/syscall"},{"inline":true,"label":"pinsyscall","permalink":"/tags/pinsyscall"},{"inline":true,"label":"kernel","permalink":"/tags/kernel"}],"readingTime":3.36,"hasTruncateMarker":true,"authors":[{"name":"Vianney Marticou","title":"Mr.VyM @ EPITA","url":"https://github.com/mrvym","page":{"permalink":"/authors/mrvym"},"socials":{"github":"https://github.com/mrvym","linkedin":"https://www.linkedin.com/in/vianney-marticou/"},"imageURL":"https://github.com/mrvym.png","key":"mrvym"}],"frontMatter":{"slug":"pinsyscall-on-openbsd","title":"D\xe9sactiver les pinsyscalls sur OpenBSD","tags":["openbsd","syscall","pinsyscall","kernel"],"authors":"mrvym","hide_title":false,"date":"05/03/2025"},"unlisted":false,"prevItem":{"title":"Understanding and mastering inter-processor communication on STM32MP","permalink":"/understanding-ipcc-on-stm32"},"nextItem":{"title":"How copy-paste works on Linux ?","permalink":"/how-copy-paste-works-on-linux"}}')}}]);