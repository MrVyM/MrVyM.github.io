"use strict";(self.webpackChunkmrvym_blog=self.webpackChunkmrvym_blog||[]).push([[427],{107:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/rpmsg_flow-c1911cb204ff51c97f84f918dbb522fb.jpg"},516:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/topo-types-132bb39a96dc425b7febc16ed8cd0bf3.svg"},994:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var i=r(2702),s=r(4848),t=r(8453);const o={title:"Understanding and mastering inter-processor communication on STM32MP",slug:"understanding-ipcc-on-stm32",authors:["mrvym"],tags:["stm32","IPC","OpenStLinux","IPCC","ARM","OpenAMP","RPMsg"],date:"08/03/2025",hide_title:!1},a="Introduction",c={authorsImageUrls:[void 0]},l=[{value:"What will and will not be covered",id:"what-will-and-will-not-be-covered",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"Targeted audience",id:"targeted-audience",level:2},{value:"Global Overview",id:"global-overview",level:2},{value:"Booting and managing the remote core",id:"booting-and-managing-the-remote-core",level:2},{value:"How does IPCC work?",id:"how-does-ipcc-work",level:3},{value:"Life Cycle Management",id:"life-cycle-management",level:3},{value:"Role of IPCC in triggering remote boot",id:"role-of-ipcc-in-triggering-remote-boot",level:3},{value:"Inter-Processor Data Exchange",id:"inter-processor-data-exchange",level:2},{value:"VirtIO",id:"virtio",level:3},{value:"Ring Buffer",id:"ring-buffer",level:4},{value:"RPMsg abstraction",id:"rpmsg-abstraction",level:3},{value:"RPMsg Client Driver",id:"rpmsg-client-driver",level:4},{value:"Why recode this driver?",id:"why-recode-this-driver",level:5},{value:"OpenAMP high-level interface",id:"openamp-high-level-interface",level:3},{value:"OpenAMP Proxy",id:"openamp-proxy",level:4},{value:"What&#39;s the difference between Linux and FreeRTOS on IPC?",id:"whats-the-difference-between-linux-and-freertos-on-ipc",level:2},{value:"LibMetal",id:"libmetal",level:3},{value:"Closing remarks",id:"closing-remarks",level:2},{value:"Glossary",id:"glossary",level:2},{value:"References and Further Reading",id:"references-and-further-reading",level:2},{value:"Virtio Mechanisms",id:"virtio-mechanisms",level:3},{value:"IPCC Mechanisms",id:"ipcc-mechanisms",level:3},{value:"OpenAMP Library",id:"openamp-library",level:3},{value:"RPMsg",id:"rpmsg",level:3},{value:"Additional resources",id:"additional-resources",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"In modern embedded systems, it is common to find multiple processor cores (CPUs) working together, each potentially running a different operating system \u2014 for example, Linux on a Cortex-A core and an RTOS such as FreeRTOS on a Cortex-M."}),"\n",(0,s.jsx)(n.p,{children:"Communication between these cores is essential, but there is no single standard to achieve this. OpenAMP, with its RPMsg and RemoteProc components, provides a flexible and widely adopted solution for intercommunication between Linux and RTOS or bare-metal systems."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"what-will-and-will-not-be-covered",children:"What will and will not be covered"}),"\n",(0,s.jsx)(n.p,{children:"This article focuses on the principles of inter-processor communication between heterogeneous processors (Linux and RTOS) in embedded systems, using OpenAMP and its components. We will explain how the key mechanisms work (RPMsg, RemoteProc, IPCC, VirtIO). We will not dive into implementation details (assembly code, hardware registers)."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"prerequisite",children:"Prerequisite"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ARM Programming (STM32):"})," basic knowledge of the ARM architecture."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"C language:"})," used for embedded development."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Understanding of an RTOS or Linux:"})," basic concepts of real-time operating systems (RTOS) and/or Linux."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"targeted-audience",children:"Targeted audience"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Engineering students"})," interested in exploring multi-core embedded systems."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Beginner engineers"})," in the field of embedded software."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"global-overview",children:"Global Overview"}),"\n",(0,s.jsx)(n.p,{children:"To better understand the architecture, here\u2019s a diagram that illustrates the separation between the Linux and RTOS environments, and the communication mechanisms between them:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Global Overview",src:r(9466).A+"",width:"675",height:"810"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Figure 1: OpenAMP architecture overview between Linux and RTOS"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"booting-and-managing-the-remote-core",children:"Booting and managing the remote core"}),"\n",(0,s.jsx)(n.h3,{id:"how-does-ipcc-work",children:"How does IPCC work?"}),"\n",(0,s.jsx)(n.p,{children:"IPCC (Inter Processor Communication Channel) is a hardware peripheral found on some STM32 microcontrollers, such as the STM32MP1 family. It allows interrupts to be triggered between microcontrollers."}),"\n",(0,s.jsxs)(n.p,{children:["This component consists of several channels. For example, the STM32MP257F has 16 channels on IPCC1 ",(0,s.jsx)(n.a,{href:"https://wiki.st.com/stm32mpu/wiki/IPCC_internal_peripheral#On_STM32MP2-lines_3",children:"^MP257F Lines"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"IPCC Peripheral",src:r(2227).A+"",width:"844",height:"355"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Figure 2: How the IPCC hardware component is working for 6 channel (STM32MP157F)"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A board may include multiple IPCC peripherals. They enable communication between two or more processors. The IPCC2 peripheral allows communication between all Cortex cores on the board."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"IPCC Features Implementation",src:r(3701).A+"",width:"988",height:"437"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Figure 3: Extract from the documentation of the STM32MP257F"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Each channel has a specific function. For example, channel 3 ",(0,s.jsx)(n.a,{href:"https://wiki.st.com/stm32mpu/wiki/IPCC_internal_peripheral#On_STM32MP2-lines_3",children:"^MP257F Lines"})," is used by the RemoteProc framework to shut down the Cortex-M33."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"life-cycle-management",children:"Life Cycle Management"}),"\n",(0,s.jsxs)(n.p,{children:["RemoteProc ",(0,s.jsx)(n.sup,{children:(0,s.jsx)(n.a,{href:"#user-content-fn-remoteproc-f76317",id:"user-content-fnref-remoteproc-f76317","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})," is a framework used to manage the lifecycle (boot, shutdown, supervision) of a remote processor. On Linux, RemoteProc can be used to load a firmware image onto a Cortex-M core (running an RTOS or bare-metal), monitor its state, or shut it down."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"int remoteproc_start(struct remoteproc *rproc); \n\nint remoteproc_stop(struct remoteproc *rproc); \n\nint remoteproc_shutdown(struct remoteproc *rproc);\n"})}),"\n",(0,s.jsx)(n.p,{children:"RemoteProc relies on specific drivers and on the firmware\u2019s resource table to allocate shared memory and required peripherals."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"role-of-ipcc-in-triggering-remote-boot",children:"Role of IPCC in triggering remote boot"}),"\n",(0,s.jsx)(n.p,{children:"IPCC plays a key role in booting the remote core. When Linux wants to start a firmware on an RTOS core, it uses IPCC to send an initialization signal. This signal triggers the remote core boot process, allowing it to initialize its own environment. IPCC can also be used to synchronize other actions, such as data exchange or critical event notification."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"inter-processor-data-exchange",children:"Inter-Processor Data Exchange"}),"\n",(0,s.jsx)(n.h3,{id:"virtio",children:"VirtIO"}),"\n",(0,s.jsx)(n.p,{children:"Communication between cores primarily takes place through shared memory (SRAM)."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Shared Memory Cortex",src:r(7561).A+"",width:"1550",height:"322"})}),"\n",(0,s.jsx)(n.p,{children:"VirtIO is a standard that defines a protocol for communication between drivers and devices of different types."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"The choice of shared memory must consider security (restricted access), performance (latency, bandwidth), and manageability (size, alignment)."})}),"\n",(0,s.jsx)(n.h4,{id:"ring-buffer",children:"Ring Buffer"}),"\n",(0,s.jsx)(n.p,{children:"The framework uses ring buffers, which can be seen as channels with their own queues."}),"\n",(0,s.jsx)(n.p,{children:"VirtIO relies on a shared-memory ring buffer mechanism called VRing. Each VRing is made of two parts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AVAIL"})}),": A ring where the sender posts available buffers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"USED"})}),": A ring where the receiver posts completed buffers."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Each side writes only to its own ring (sender to ",(0,s.jsx)(n.code,{children:"AVAIL"}),", receiver to ",(0,s.jsx)(n.code,{children:"USED"}),"), preventing race conditions.\nVirtIO supports multiple VRings, allowing concurrent communication channels (e.g., one for commands, one for data, one for control messages)."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Resource assignement",src:r(9853).A+"",width:"1172",height:"340"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Figure 4: Resource assignement example for IPC"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"rpmsg-abstraction",children:"RPMsg abstraction"}),"\n",(0,s.jsx)(n.p,{children:"RPMsg is a VirtIO-based messaging bus that allows kernel drivers to communicate with remote processors present in the system. It provides the infrastructure to exchange wire-protocol messages between client drivers. These drivers can then expose appropriate user space interfaces if needed."}),"\n",(0,s.jsx)(n.p,{children:"The RPMsg client driver implements a service associated with the remote processor. This driver is probed by the RPMsg framework when a corresponding service is announced by the remote processor via a \u201cnew service announcement\u201d RPMsg message."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"RPMSG Flow",src:r(107).A+"",width:"951",height:"960"})}),"\n",(0,s.jsx)(n.h4,{id:"rpmsg-client-driver",children:"RPMsg Client Driver"}),"\n",(0,s.jsx)(n.p,{children:"The RPMsg client driver serves to handle a specific communication service between cores. For example, if the remote core exposes a logging or file-access service, an RPMsg client driver on Linux receives the message and routes it to the appropriate Linux subsystem."}),"\n",(0,s.jsx)(n.p,{children:"It abstracts the low-level messaging details, allowing developers to implement high-level inter-core services (e.g., sensor acquisition, control, logging, RPC)."}),"\n",(0,s.jsx)(n.h5,{id:"why-recode-this-driver",children:"Why recode this driver?"}),"\n",(0,s.jsx)(n.p,{children:"You may want to re-implement or customize an RPMsg client driver in these situations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You are designing a custom protocol or service not covered by existing drivers."}),"\n",(0,s.jsx)(n.li,{children:"You need to support a proprietary message format or payload."}),"\n",(0,s.jsx)(n.li,{children:"You want to expose RPMsg messages to user space differently (e.g., via character device, netlink, or custom interface)."}),"\n",(0,s.jsx)(n.li,{children:"You need to implement secure or encrypted communication on top of RPMsg."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"By customizing the RPMsg client driver, developers can fully adapt the communication stack to their application's needs."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"openamp-high-level-interface",children:"OpenAMP high-level interface"}),"\n",(0,s.jsx)(n.p,{children:"OpenAMP\u2019s high-level interface integrates and abstracts the complexities of managing remote cores and orchestrating inter-processor communication (IPC) in heterogeneous multicore environments. By leveraging RemoteProc for lifecycle management, RPMsg for robust messaging, and VirtIO for virtual device abstraction."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"OpenAMP overview",src:r(4803).A+"",width:"1247",height:"529"})}),"\n",(0,s.jsx)(n.p,{children:"OpenAMP enables seamless control and data exchange between master and remote processors\u2014regardless of whether they run Linux, RTOS, or bare-metal firmware."}),"\n",(0,s.jsxs)(n.p,{children:["The framework\u2019s support for various topologies (star, chain, or combined) and its compatibility with industry-standard IPC mechanisms (such as IPCC, Mailbox, and RPMsg) further enhance its flexibility and reliability in real-world deployments.\n",(0,s.jsx)(n.img,{alt:"OpenAMP overview",src:r(516).A+"",width:"945",height:"340"})]}),"\n",(0,s.jsx)(n.h4,{id:"openamp-proxy",children:"OpenAMP Proxy"}),"\n",(0,s.jsx)(n.p,{children:"The framework\u2019s proxy mechanism extends this interoperability, allowing system calls such as open, read, and write to be transparently forwarded from an RTOS or bare-metal context to Linux, effectively giving remote cores access to host filesystem resources without requiring a full OS stack."}),"\n",(0,s.jsx)(n.p,{children:"This is really valuable in scenarios where resource-constrained remote cores need to offload I/O operations to a more capable master processor."}),"\n",(0,s.jsx)(n.h2,{id:"whats-the-difference-between-linux-and-freertos-on-ipc",children:"What's the difference between Linux and FreeRTOS on IPC?"}),"\n",(0,s.jsx)(n.p,{children:"The main difference between Linux and FreeRTOS regarding Inter-Processor Communication (IPC) lies in the abstraction layers and available mechanisms:"}),"\n",(0,s.jsx)(n.p,{children:"Linux: Drivers and frameworks (RemoteProc, RPMsg, VirtIO) are tightly integrated into the kernel. This integration provides fine-grained control over resources and peripherals, enabling robust and scalable IPC solutions. For instance, on STM32MP1xx, Linux can communicate with the Cortex-M4 core using OpenAMP-based virtual UART devices, which appear as TTY devices in the Linux filesystem and allow for message passing and synchronization via shared memory and IPCC peripherals."}),"\n",(0,s.jsx)(n.p,{children:"FreeRTOS (or RTOS in general): OpenAMP provides a lightweight library implementing similar concepts as Linux, but with an interface simplified for real-time constraints. Each vendor porting OpenAMP provides an implementation of libmetal for their system. For example, STM32MP1xx has strong support for OpenAMP, with documentation and examples dedicated to testing the library on these devices."}),"\n",(0,s.jsx)(n.h3,{id:"libmetal",children:"LibMetal"}),"\n",(0,s.jsx)(n.p,{children:"LibMetal is the abstraction layer used by OpenAMP to manage hardware resources and portability. On FreeRTOS, libmetal is typically provided by the vendor and adapted to the specific hardware and RTOS environment, enabling OpenAMP to function across different platforms and RTOSes."}),"\n",(0,s.jsx)(n.p,{children:"For instance, on STM32MP1xx, the OpenAMP middleware initializes and configures the IPCC peripheral through HAL, sets up the OpenAMP/RPMsg framework, and creates virtual UART instances for IPC. The Cortex-M4 firmware (running FreeRTOS or bare metal) communicates with Linux on the Cortex-A7, using shared memory and IPCC for synchronization."}),"\n",(0,s.jsx)(n.h2,{id:"closing-remarks",children:"Closing remarks"}),"\n",(0,s.jsx)(n.p,{children:"OpenAMP is a powerful framework for intercommunication between Linux and RTOS or bare-metal cores in multi-core embedded systems. It relies on open standards (RPMsg, VirtIO, RemoteProc) and uses hardware peripherals such as IPCC for synchronization. Understanding these mechanisms is essential to designing modern, flexible, and high-performance embedded systems."}),"\n",(0,s.jsxs)(n.p,{children:["However, it\u2019s important to remember that, like in any field (and especially in IT) this technology is just one among many. If this topic has piqued your interest, I encourage you to learn more about Symmetric Multi-Processing ",(0,s.jsx)(n.sup,{children:(0,s.jsx)(n.a,{href:"#user-content-fn-smp-f76317",id:"user-content-fnref-smp-f76317","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})})," (SMP)."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"glossary",children:"Glossary"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"LCM"})," \u2013 Life Cycle Management of remote processor: managing the remote processor's lifecycle (boot, stop, supervision)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RPMsg"})," \u2013 Lightweight messaging protocol used over shared memory."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RemoteProc"})," \u2013 Framework for booting and managing remote cores."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IPCC"})," \u2013 Hardware peripheral for signaling between processors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AMP"})," \u2013 Asymmetric Multi-Processing: architecture where multiple processors run different operating systems."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"OpenAMP"})," \u2013 Middleware for AMP communication (based on RPMsg + RemoteProc)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"VirtIO"})," - Standard that allows virtual machines to efficiently access simplified virtual devices, such as network and storage."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"VRing"})," \u2013 A data structure (ring buffer) defined by the VirtIO specification, used to organize and exchange buffers."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"references-and-further-reading",children:"References and Further Reading"}),"\n",(0,s.jsx)(n.h3,{id:"virtio-mechanisms",children:"Virtio Mechanisms"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.kernel.org/driver-api/virtio/virtio.html",children:"Linux Virtio"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.oasis-open.org/virtio/virtio/v1.2/virtio-v1.2.html",children:"Virtio Specification v1.2"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ipcc-mechanisms",children:"IPCC Mechanisms"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://wiki.st.com/stm32mpu/wiki/IPCC_internal_peripheral#Peripheral_overview",children:"STM32 IPCC"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.zephyrproject.org/latest/services/ipc/ipc_service/ipc_service.html",children:"Zephyr IPC Service"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.st.com/resource/en/application_note/an5617-stm32h745755-and-stm32h747757-lines-interprocessor-communications-stmicroelectronics.pdf",children:"AN5617: IPCC Application Note"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"openamp-library",children:"OpenAMP Library"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.openampproject.org/docs/whitepapers/Introduction_to_OpenAMPlib_v1.1a.pdf",children:"Introduction to OpenAMP Library (Whitepaper)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://wiki.st.com/stm32mpu/wiki/Coprocessor_management_overview",children:"Coprocessor Management Overview on STM32MPx"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=QzICJz-xRzk",children:"STM32 Dual Core - Inter-core communication using HSEM (YouTube)"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rpmsg",children:"RPMsg"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://wiki.st.com/stm32mpu/wiki/Linux_RPMsg_framework_overview",children:"Linux RPMsg on OpenStLinux"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://wiki.st.com/stm32mpu/wiki/Getting_started/STM32MP1_boards/STM32MP157x-EV1/Develop_on_Arm%C2%AE_Cortex%C2%AE-M4/Modify,_rebuild_and_reload_a_firmware",children:"Develop on Arm (STM32MP157x-EV1)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/STMicroelectronics/linux/blob/v6.6-stm32mp/include/linux/rpmsg.h",children:"Linux RPMsg driver source"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://wiki.st.com/stm32mpu/wiki/Exchanging_buffers_with_the_coprocessor",children:"Exchanging buffers with RPMsg"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"additional-resources",children:"Additional resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/diegosueiro/meta-ipc",children:"Yocto meta-ipc layer"})}),"\n"]}),"\n","\n",(0,s.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,s.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{id:"user-content-fn-remoteproc-f76317",children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://docs.kernel.org/staging/remoteproc.html",children:"https://docs.kernel.org/staging/remoteproc.html"})," ",(0,s.jsx)(n.a,{href:"#user-content-fnref-remoteproc-f76317","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{id:"user-content-fn-smp-f76317",children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Symmetric_multiprocessing",children:"https://en.wikipedia.org/wiki/Symmetric_multiprocessing"})," ",(0,s.jsx)(n.a,{href:"#user-content-fnref-smp-f76317","data-footnote-backref":"","aria-label":"Back to reference 2",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},2227:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/IPCC_peripheral-5dffa79f2d4ff672ab2f93226c953be2.png"},2702:e=>{e.exports=JSON.parse('{"permalink":"/understanding-ipcc-on-stm32","editUrl":"https://github.com/MrVyM/MrVyM.github.io/issues/blog/2025-08-03-Understanding_and_mastering_inter_processor_communication_on_stm32/index.mdx","source":"@site/blog/2025-08-03-Understanding_and_mastering_inter_processor_communication_on_stm32/index.mdx","title":"Understanding and mastering inter-processor communication on STM32MP","description":"In modern embedded systems, it is common to find multiple processor cores (CPUs) working together, each potentially running a different operating system \u2014 for example, Linux on a Cortex-A core and an RTOS such as FreeRTOS on a Cortex-M.","date":"2025-08-03T00:00:00.000Z","tags":[{"inline":true,"label":"stm32","permalink":"/tags/stm-32"},{"inline":true,"label":"IPC","permalink":"/tags/ipc"},{"inline":true,"label":"OpenStLinux","permalink":"/tags/open-st-linux"},{"inline":true,"label":"IPCC","permalink":"/tags/ipcc"},{"inline":true,"label":"ARM","permalink":"/tags/arm"},{"inline":true,"label":"OpenAMP","permalink":"/tags/open-amp"},{"inline":true,"label":"RPMsg","permalink":"/tags/rp-msg"}],"readingTime":5.466666666666667,"hasTruncateMarker":true,"authors":[{"name":"Vianney Marticou","title":"Mr. VyM @ EPITA","url":"https://github.com/mrvym","page":{"permalink":"/authors/mrvym"},"socials":{"github":"https://github.com/mrvym","linkedin":"https://www.linkedin.com/in/vianney-marticou/"},"imageURL":"https://github.com/mrvym.png","key":"mrvym"}],"frontMatter":{"title":"Understanding and mastering inter-processor communication on STM32MP","slug":"understanding-ipcc-on-stm32","authors":["mrvym"],"tags":["stm32","IPC","OpenStLinux","IPCC","ARM","OpenAMP","RPMsg"],"date":"08/03/2025","hide_title":false},"unlisted":false,"nextItem":{"title":"D\xe9sactiver les pinsyscalls sur OpenBSD","permalink":"/pinsyscall-on-openbsd"}}')},3701:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/IPCC_Features_Implementation-05d0be5a0db17ae89682f711e9ba3aaf.png"},4803:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/overview-architecture-0f7352d204ab237338561a3aeeec27e5.svg"},7561:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/Shared_memory_cortex-096f503196f3821dadac6eb1b5f588f2.png"},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(6540);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}},9466:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/Global_overview-91f71c638724a5e7d4653340ab2eec7d.png"},9853:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/resource-assignment-886116124d076224ccb42079495d78d3.svg"}}]);